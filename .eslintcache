[{"D:\\Projects\\React\\Tic-Tac-Toe\\src\\App.js":"1","D:\\Projects\\React\\Tic-Tac-Toe\\src\\index.js":"2","D:\\Projects\\React\\Tic-Tac-Toe\\src\\components\\Board.js":"3","D:\\Projects\\React\\Tic-Tac-Toe\\src\\components\\Box.js":"4","D:\\Projects\\React\\Tic-Tac-Toe\\src\\components\\Game.js":"5","D:\\Projects\\React\\Tic-Tac-Toe\\src\\Logic.js":"6"},{"size":132,"mtime":1607314889074,"results":"7","hashOfConfig":"8"},{"size":218,"mtime":1607314466481,"results":"9","hashOfConfig":"8"},{"size":479,"mtime":1607338160744,"results":"10","hashOfConfig":"8"},{"size":327,"mtime":1607322215287,"results":"11","hashOfConfig":"8"},{"size":965,"mtime":1607351920072,"results":"12","hashOfConfig":"8"},{"size":500,"mtime":1607338469132,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1oqz88v",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Projects\\React\\Tic-Tac-Toe\\src\\App.js",[],"D:\\Projects\\React\\Tic-Tac-Toe\\src\\index.js",[],"D:\\Projects\\React\\Tic-Tac-Toe\\src\\components\\Board.js",[],"D:\\Projects\\React\\Tic-Tac-Toe\\src\\components\\Box.js",[],"D:\\Projects\\React\\Tic-Tac-Toe\\src\\components\\Game.js",["27","28"],"import React, { useState } from \"react\";\r\nimport { calculateWinner } from \"../Logic\";\r\nimport Board from \"./Board\";\r\n\r\nconst Game = () => {\r\n  const [board, setBoard] = useState(Array(9).fill(null));\r\n  const [xIsNext, setXisNext] = useState(true);\r\n  const winner = calculateWinner(board);\r\n\r\n  const handleClick = (i) => {\r\n    const boardCopy = [...board];\r\n    // If user click an occupied square or if game is won, return\r\n    if (winner || boardCopy[i]) return;\r\n    // Put an X or an O in the clicked square\r\n    boardCopy[i] = xIsNext ? \"X\" : \"O\";\r\n    setBoard(boardCopy);\r\n    setXisNext(!xIsNext);\r\n  };\r\n\r\n  const jumpTo = () => {};\r\n\r\n  const renderMoves = () => {};\r\n\r\n  return (\r\n    <>\r\n      <Board squares={board} onClick={handleClick} />\r\n      <div>\r\n        <p>\r\n          {winner\r\n            ? \"Winner: \" + winner\r\n            : \"Next Player: \" + (xIsNext ? \"X\" : \"O\")}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","D:\\Projects\\React\\Tic-Tac-Toe\\src\\Logic.js",["29"],{"ruleId":"30","severity":1,"message":"31","line":20,"column":9,"nodeType":"32","messageId":"33","endLine":20,"endColumn":15},{"ruleId":"30","severity":1,"message":"34","line":22,"column":9,"nodeType":"32","messageId":"33","endLine":22,"endColumn":20},{"ruleId":"30","severity":1,"message":"35","line":21,"column":7,"nodeType":"32","messageId":"33","endLine":21,"endColumn":14},"no-unused-vars","'jumpTo' is assigned a value but never used.","Identifier","unusedVar","'renderMoves' is assigned a value but never used.","'squares' is assigned a value but never used."]